This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-02T17:53:18.929Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    svelte.svg
  lib/
    Counter.svelte
  app.css
  App.svelte
  main.js
  vite-env.d.ts
.gitignore
Dockerfile
index.html
jsconfig.json
package.json
README.md
svelte.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/svelte.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="26.6" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 308"><path fill="#FF3E00" d="M239.682 40.707C211.113-.182 154.69-12.301 113.895 13.69L42.247 59.356a82.198 82.198 0 0 0-37.135 55.056a86.566 86.566 0 0 0 8.536 55.576a82.425 82.425 0 0 0-12.296 30.719a87.596 87.596 0 0 0 14.964 66.244c28.574 40.893 84.997 53.007 125.787 27.016l71.648-45.664a82.182 82.182 0 0 0 37.135-55.057a86.601 86.601 0 0 0-8.53-55.577a82.409 82.409 0 0 0 12.29-30.718a87.573 87.573 0 0 0-14.963-66.244"></path><path fill="#FFF" d="M106.889 270.841c-23.102 6.007-47.497-3.036-61.103-22.648a52.685 52.685 0 0 1-9.003-39.85a49.978 49.978 0 0 1 1.713-6.693l1.35-4.115l3.671 2.697a92.447 92.447 0 0 0 28.036 14.007l2.663.808l-.245 2.659a16.067 16.067 0 0 0 2.89 10.656a17.143 17.143 0 0 0 18.397 6.828a15.786 15.786 0 0 0 4.403-1.935l71.67-45.672a14.922 14.922 0 0 0 6.734-9.977a15.923 15.923 0 0 0-2.713-12.011a17.156 17.156 0 0 0-18.404-6.832a15.78 15.78 0 0 0-4.396 1.933l-27.35 17.434a52.298 52.298 0 0 1-14.553 6.391c-23.101 6.007-47.497-3.036-61.101-22.649a52.681 52.681 0 0 1-9.004-39.849a49.428 49.428 0 0 1 22.34-33.114l71.664-45.677a52.218 52.218 0 0 1 14.563-6.398c23.101-6.007 47.497 3.036 61.101 22.648a52.685 52.685 0 0 1 9.004 39.85a50.559 50.559 0 0 1-1.713 6.692l-1.35 4.116l-3.67-2.693a92.373 92.373 0 0 0-28.037-14.013l-2.664-.809l.246-2.658a16.099 16.099 0 0 0-2.89-10.656a17.143 17.143 0 0 0-18.398-6.828a15.786 15.786 0 0 0-4.402 1.935l-71.67 45.674a14.898 14.898 0 0 0-6.73 9.975a15.9 15.9 0 0 0 2.709 12.012a17.156 17.156 0 0 0 18.404 6.832a15.841 15.841 0 0 0 4.402-1.935l27.345-17.427a52.147 52.147 0 0 1 14.552-6.397c23.101-6.006 47.497 3.037 61.102 22.65a52.681 52.681 0 0 1 9.003 39.848a49.453 49.453 0 0 1-22.34 33.12l-71.664 45.673a52.218 52.218 0 0 1-14.563 6.398"></path></svg>

================
File: src/lib/Counter.svelte
================
<script>
  let count = $state(0)
  const increment = () => {
    count += 1
  }
</script>

<button onclick={increment}>
  count is {count}
</button>

================
File: src/app.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/App.svelte
================
<script>
  import { onMount } from "svelte";

  let name = "";
  let tickets = "";
  let roomId = "";
  let ws;
  let roomState = null;
  let creating = true;
  let connected = false;
  let isGameMaster = false;
  let errorMessage = "";
  let connecting = false;

  onMount(() => {
    const params = new URLSearchParams(window.location.search);
    const roomIdParam = params.get("roomId");
    if (roomIdParam) {
      roomId = roomIdParam;
      creating = false;
    }
  });

  async function createRoom() {
    try {
      connecting = true;
      errorMessage = "";

      if (!tickets.trim()) {
        throw new Error("Please enter at least one ticket ID");
      }

      const response = await fetch("http://localhost:8080/create-room", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ticketIds: tickets.split("\n").filter((t) => t.trim()),
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || "Failed to create room");
      }

      const data = await response.json();
      roomId = data.roomId;
      isGameMaster = true;
      connectWebSocket();
      window.history.pushState({}, "", `?roomId=${roomId}`);
    } catch (error) {
      errorMessage = `Error: ${error.message}`;
      connected = false;
    } finally {
      connecting = false;
    }
  }

  function connectWebSocket() {
    try {
      connecting = true;
      errorMessage = "";

      if (!name.trim()) {
        throw new Error("Please enter your name");
      }

      ws = new WebSocket(
        `ws://localhost:8080/ws?roomId=${roomId}&name=${name}&gamemaster=${isGameMaster}`,
      );

      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          if (message.type === "roomState") {
            roomState = message.payload;
            connected = true;
            errorMessage = "";
          } else if (message.error) {
            errorMessage = message.error;
          }
        } catch (error) {
          errorMessage = "Error processing message from server";
        }
      };

      ws.onerror = () => {
        errorMessage = "Connection error occurred";
        connected = false;
      };

      ws.onclose = () => {
        connected = false;
        if (!errorMessage) {
          errorMessage = "Connection lost. Reconnecting...";
          setTimeout(connectWebSocket, 1000);
        }
      };
    } catch (error) {
      errorMessage = `Error: ${error.message}`;
      connected = false;
    } finally {
      connecting = false;
    }
  }

  function vote(ticketId, score) {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      errorMessage = "Connection lost. Please refresh the page.";
      return;
    }

    ws.send(
      JSON.stringify({
        type: "vote",
        payload: { ticketId, vote: score },
      }),
    );
  }

  function revealVotes() {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      errorMessage = "Connection lost. Please refresh the page.";
      return;
    }

    ws.send(JSON.stringify({ type: "reveal" }));
  }

  function nextTicket() {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      errorMessage = "Connection lost. Please refresh the page.";
      return;
    }

    ws.send(JSON.stringify({ type: "next" }));
  }

  function joinRoom() {
    connectWebSocket();
    creating = false;
    window.history.pushState({}, "", `?roomId=${roomId}`);
  }
</script>

{#if !connected}
  <div class="app">
    <div class="login-container">
      {#if errorMessage}
        <div class="error-message">
          {errorMessage}
        </div>
      {/if}

      {#if connecting}
        <div class="connecting-message">Connecting...</div>
      {/if}

      <input
        type="text"
        bind:value={name}
        placeholder="Enter your name"
        class="login-input"
      />

      {#if creating}
        <textarea
          bind:value={tickets}
          placeholder="Enter ticket IDs (one per line)"
          class="login-input"
          rows="5"
        />
        <div class="button-group">
          <button
            on:click={createRoom}
            disabled={!name || !tickets || connecting}
            class="primary-button"
          >
            Create Room
          </button>
          <button
            on:click={() => (creating = false)}
            class="secondary-button"
            disabled={connecting}
          >
            Join Existing Room
          </button>
        </div>
      {:else}
        <input
          type="text"
          bind:value={roomId}
          placeholder="Enter room ID"
          class="login-input"
        />
        <div class="button-group">
          <button
            on:click={joinRoom}
            disabled={!name || !roomId || connecting}
            class="primary-button"
          >
            Join Room
          </button>
          <button
            on:click={() => (creating = true)}
            class="secondary-button"
            disabled={connecting}
          >
            Create New Room
          </button>
        </div>
      {/if}
    </div>
  </div>
{:else}
  <div class="app">
    {#if errorMessage}
      <div class="error-message">
        {errorMessage}
      </div>
    {/if}

    <div class="room-header">
      <div class="room-info">
        Room ID: <span class="room-id">{roomId}</span>
        <button
          class="copy-button"
          on:click={() => {
            navigator.clipboard.writeText(window.location.href);
          }}
        >
          Copy Link
        </button>
      </div>
      <div class="participants">
        <div class="game-master">
          Game Master: {roomState.GameMaster}
          {#if roomState.GameMaster === name}(You){/if}
        </div>
        <div class="players">
          Players: {Object.keys(roomState.Users)
            .filter((u) => u !== roomState.GameMaster)
            .join(", ")}
        </div>
      </div>
    </div>

    {#if roomState.Tickets[roomState.CurrentTicket]}
      <div class="ticket-card">
        <h3>Current Ticket: {roomState.Tickets[roomState.CurrentTicket].ID}</h3>
        <div class="ticket-progress">
          Ticket {roomState.CurrentTicket + 1} of {roomState.Tickets.length}
        </div>

        {#if !isGameMaster}
          <div class="voting-panel">
            {#each [1, 2, 3, 5, 8, 13] as score}
              <button
                class="vote-button {roomState.Tickets[roomState.CurrentTicket]
                  .Votes[name] === score
                  ? 'selected'
                  : ''}"
                on:click={() =>
                  vote(roomState.Tickets[roomState.CurrentTicket].ID, score)}
              >
                {score}
              </button>
            {/each}
          </div>
        {/if}

        <div class="votes-section">
          {#if roomState.VotesRevealed}
            <h4>Votes:</h4>
            {#each Object.entries(roomState.Tickets[roomState.CurrentTicket].Votes) as [user, vote]}
              <div class="vote-entry">{user}: {vote}</div>
            {/each}
          {:else}
            <div class="hidden-votes">
              {Object.keys(roomState.Tickets[roomState.CurrentTicket].Votes)
                .length} votes cast
            </div>
          {/if}
        </div>

        {#if isGameMaster}
          <div class="control-panel">
            <button
              on:click={revealVotes}
              disabled={roomState.VotesRevealed}
              class="reveal-button"
            >
              Reveal Votes
            </button>
            <button
              on:click={nextTicket}
              disabled={roomState.CurrentTicket >= roomState.Tickets.length - 1}
              class="next-button"
            >
              Next Ticket
            </button>
          </div>
        {/if}
      </div>
    {/if}
  </div>
{/if}

<style>
  .app {
    background: #1e1e1e;
    color: #fff;
    padding: 2rem;
    /* min-height: 100vh; */
  }

  .login-container {
    max-width: 500px;
    margin: 0 auto;
    padding: 2rem;
  }

  .error-message {
    background: #ff44336e;
    color: white;
    padding: 1rem;
    border-radius: 4px;
    margin: 1rem 0;
  }

  .connecting-message {
    color: #4caf50;
    text-align: center;
    margin: 1rem 0;
  }

  .login-input {
    width: 100%;
    padding: 0.75rem;
    margin-bottom: 1rem;
    background: #2d2d2d;
    border: 1px solid #3d3d3d;
    color: #fff;
    border-radius: 4px;
  }

  .login-input:focus {
    outline: none;
    border-color: #4caf50;
  }

  .button-group {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  .primary-button,
  .secondary-button {
    padding: 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: opacity 0.2s;
  }

  .primary-button {
    background: #4caf50;
    color: white;
  }

  .secondary-button {
    background: #2d2d2d;
    color: #fff;
  }

  .primary-button:disabled,
  .secondary-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .room-header {
    background: #2d2d2d;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
  }

  .room-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .room-id {
    color: #4caf50;
    font-family: monospace;
  }

  .copy-button {
    background: #4caf50;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
  }

  .participants {
    margin-top: 1rem;
  }

  .game-master {
    color: #4caf50;
    margin-bottom: 0.5rem;
  }

  .ticket-card {
    background: #2d2d2d;
    padding: 1.5rem;
    border-radius: 8px;
  }

  .ticket-progress {
    color: #888;
    margin: 1rem 0;
  }

  .voting-panel {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
    gap: 0.75rem;
    margin: 1.5rem 0;
  }

  .vote-button {
    aspect-ratio: 1;
    border: 2px solid #4caf50;
    background: transparent;
    color: #4caf50;
    border-radius: 50%;
    font-size: 1.1rem;
    transition: all 0.2s;
  }

  .vote-button:hover {
    background: #4caf5022;
  }

  .vote-button.selected {
    background: #4caf50;
    color: white;
  }

  .votes-section {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #3d3d3d;
  }

  .vote-entry {
    padding: 0.5rem 0;
    border-bottom: 1px solid #3d3d3d;
  }

  .hidden-votes {
    text-align: center;
    color: #888;
    font-style: italic;
  }

  .control-panel {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .reveal-button,
  .next-button {
    padding: 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
  }

  .reveal-button {
    background: #666;
    color: white;
  }

  .next-button {
    background: #4caf50;
    color: white;
  }

  .reveal-button:disabled,
  .next-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>

================
File: src/main.js
================
import { mount } from 'svelte'
import './app.css'
import App from './App.svelte'

const app = mount(App, {
  target: document.getElementById('app'),
})

export default app

================
File: src/vite-env.d.ts
================
/// <reference types="svelte" />
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: Dockerfile
================
# Use an official Node.js runtime as a parent image
FROM node:22-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the application code
COPY . .

# Build the application
RUN npm run build

# Use an official Nginx image to serve the built application
FROM nginx:alpine

# Copy the built application from the previous stage
COPY --from=0 /app/dist /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + Svelte</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "moduleResolution": "bundler",
    "target": "ESNext",
    "module": "ESNext",
    /**
     * svelte-preprocess cannot figure out whether you have
     * a value or a type, so tell TypeScript to enforce using
     * `import type` instead of `import` for Types.
     */
    "verbatimModuleSyntax": true,
    "isolatedModules": true,
    "resolveJsonModule": true,
    /**
     * To have warnings / errors of the Svelte compiler at the
     * correct position, enable source maps by default.
     */
    "sourceMap": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    /**
     * Typecheck JS in `.svelte` and `.js` files by default.
     * Disable this if you'd like to use dynamic types.
     */
    "checkJs": true
  },
  /**
   * Use global.d.ts instead of compilerOptions.types
   * to avoid limiting type declarations.
   */
  "include": ["src/**/*.d.ts", "src/**/*.js", "src/**/*.svelte"]
}

================
File: package.json
================
{
  "name": "planning-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "@sveltejs/vite-plugin-svelte": "^5.0.0",
    "svelte": "^5.2.7",
    "vite": "^6.0.1"
  }
}

================
File: README.md
================
# Svelte + Vite

This template should help get you started developing with Svelte in Vite.

## Recommended IDE Setup

[VS Code](https://code.visualstudio.com/) + [Svelte](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode).

## Need an official Svelte framework?

Check out [SvelteKit](https://github.com/sveltejs/kit#readme), which is also powered by Vite. Deploy anywhere with its serverless-first approach and adapt to various platforms, with out of the box support for TypeScript, SCSS, and Less, and easily-added support for mdsvex, GraphQL, PostCSS, Tailwind CSS, and more.

## Technical considerations

**Why use this over SvelteKit?**

- It brings its own routing solution which might not be preferable for some users.
- It is first and foremost a framework that just happens to use Vite under the hood, not a Vite app.

This template contains as little as possible to get started with Vite + Svelte, while taking into account the developer experience with regards to HMR and intellisense. It demonstrates capabilities on par with the other `create-vite` templates and is a good starting point for beginners dipping their toes into a Vite + Svelte project.

Should you later need the extended capabilities and extensibility provided by SvelteKit, the template has been structured similarly to SvelteKit so that it is easy to migrate.

**Why `global.d.ts` instead of `compilerOptions.types` inside `jsconfig.json` or `tsconfig.json`?**

Setting `compilerOptions.types` shuts out all other types not explicitly listed in the configuration. Using triple-slash references keeps the default TypeScript setting of accepting type information from the entire workspace, while also adding `svelte` and `vite/client` type information.

**Why include `.vscode/extensions.json`?**

Other templates indirectly recommend extensions via the README, but this file allows VS Code to prompt the user to install the recommended extension upon opening the project.

**Why enable `checkJs` in the JS template?**

It is likely that most cases of changing variable types in runtime are likely to be accidental, rather than deliberate. This provides advanced typechecking out of the box. Should you like to take advantage of the dynamically-typed nature of JavaScript, it is trivial to change the configuration.

**Why is HMR not preserving my local component state?**

HMR state preservation comes with a number of gotchas! It has been disabled by default in both `svelte-hmr` and `@sveltejs/vite-plugin-svelte` due to its often surprising behavior. You can read the details [here](https://github.com/sveltejs/svelte-hmr/tree/master/packages/svelte-hmr#preservation-of-local-state).

If you have state that's important to retain within a component, consider creating an external store which would not be replaced by HMR.

```js
// store.js
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)
```

================
File: svelte.config.js
================
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'

export default {
  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess
  // for more information about preprocessors
  preprocess: vitePreprocess(),
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import { svelte } from '@sveltejs/vite-plugin-svelte'

// https://vite.dev/config/
export default defineConfig({
  plugins: [svelte()],
})
